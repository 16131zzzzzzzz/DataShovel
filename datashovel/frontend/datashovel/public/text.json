{"pics-000009.png": {"pageNum": 9, "bbox": [[54.149017978864755, 971.0837369341273, 524.0402433951629, 374.94480732220154], [54.956690222712226, 647.8046098318255, 522.6384275661695, 237.23825537244943], [602.7104893345864, 664.8967868446962, 523.3567264539064, 141.34539086218126], [602.4829223573585, 948.6699203615344, 523.1233698703003, 119.00619389015651], [602.5941064308639, 524.4607381263829, 523.0191569554951, 140.35616041031597], [603.0838598683562, 877.7531183635609, 523.1974532008934, 69.7711031882668], [602.4766010524354, 806.7419084801397, 523.7988042552038, 70.40475715269622], [55.087875761619514, 563.2935011776576, 522.544460925407, 56.388770110040696], [602.6603915161312, 1117.198655828675, 523.1549173172992, 71.75293361419062], [53.273033549047405, 1346.3690497899552, 524.8624081167105, 47.078228914042256], [602.6305573199993, 1188.8723137752672, 522.5437593787158, 47.64663667600462], [700.255549920874, 113.59605076682955, 327.40478101762346, 43.26719975953863], [123.5909119703135, 1442.2445765769387, 384.4083518672046, 20.899246978797464], [609.2928582431448, 351.1453206957106, 506.57720654030754, 43.61439073151655], [636.0875110265716, 1510.9015932000746, 431.4137008145673, 37.86950855231635], [828.1188295478081, 92.64649069528463, 73.72667902450394, 20.862519186892186], [602.8810464122752, 1088.774836944322, 236.45112821515795, 23.99957498072331], [54.76247255977426, 913.8223831041436, 124.26444479444854, 23.657108997820842], [53.19758404858211, 943.8940208690208, 463.0060246475968, 22.19786083203269], [279.32579239871853, 1420.8606085146487, 74.73909213165769, 21.185104988855073], [827.3714977041077, 331.10138097761137, 74.26605765952252, 20.689478906264583], [604.8892127388417, 410.10981483422574, 517.0943219141609, 84.76419040289244], [602.5721295576736, 170.8111579047124, 523.3284873534094, 127.38573610419098], [52.86235180835775, 1478.9483529785093, 524.7556290179558, 65.8273531493785], [116.63437498016803, 94.80893516876567, 400.15593352152786, 453.2054369920888], [625.3343805763875, 1267.8267127487118, 479.47481845460106, 231.161475257225]], "text": ["We investigated whether the average lookahead of the MA synchronization protocol is increased. The optimum look ahead was re-evaluated every 10 minutes of simulation time. (The results using different evaluation periods are presented in Section 4.2.4.) The average lookahead is cal culated by averaging the lookahead values throughout the simulation for all LPs. Let us denote the MA protocol with computation replication as MA-CR. The average look ahead values of MA and MA-CR methods, in terms of number of update interval, are shown in Fig. 9a. The total number of synchronization messages sent during the simulation is shown in Fig. 9b. For comparison, the results of using global barrier synchronization, denoted as barrier are also shown in the figures. Note that the average obtainable optimum number of extended layers to repli cate (i.e., k) is equal to lookahead minus 1. ", "the road network during the simulation to balance the workload of LPs so as to improve the speed-up. The work load of LPs is periodically checked and a repartitioning is performed when workload imbalance exceeds a threshold Due to the change of network partitions, extended layers need to be re-computed by running Algorithm 2. The simu lation was run with 8, 16, 32, and 48 LPs. For each setting. four simulation runs using different seeds for random num ber generation were performed. Means and standard devia- tions of the measurements were collected ", "To observe whether all available extended layers are rep licated, the average numbers of available extended layers are shown in Table 2. It can be observed that the number of available extended lavers decreases as the number of LPs increases. The actual numbers of layers replicated are much smaller than the available numbers of layers. ", "Moreover, we compared the lookahead values obtained with and without using adaptive range. The result is shown in Table 4. It shows that there is no significant difference in the lookahead values with and without adaptive range. The adaptive range does not affect lookahead much ", "increase. Correspondingly, there are much fewer synchroni zation messages when the MA-CR method is used, com- pared to the MA method, as shown in Fig. 9b. This reduction of synchronisation messages comes with an increase of message sizes, which is shown in Table 3. ", "It can be observed from Table 3 that the average size of messages has increased using the MA-CR method. This is mainly caused by the replication of external agents. ", "The average numbers of complete agents and shared states sent in a message using MA and MA-CR methods are shown in Table 3. ", "Fig.9.(a) Averagelookahead of allLPs throughout the simulation(large lookahead means less frequent synchronization). (b) Total number of messages sent during the simulation (the smaller the better). ", "The overall speed-up of the parallel simulation is shown in Fig. 10. The speed-up is measured against the sequential simulation, of which execution time is around 9000 seconds ", ". 9a that the lookahead values It can be observ of the MA-CR method a ", "The MA-CR method has the highest speed-up, and the bar rier method has the lowest speed-up. This shows that using ", "States Sent per Message ", "Averaae Number of Available Extended Lavers ", "Averag and Without Adaptive Range (Unit=Update Intervals) ", "10.Speed-up of the parallel simulation with respect to the se ulation. ", "TABLE 3 ", "4.2.2 Overall Speed-Up ", "4.2 Results ", "4.2.1 ", "TABLE 2 ", "TABLE 4 ", "32 LPs 8 LPs 16 LPs 48 LPs with 3.690.03 4.130.06 4.56 0.05 3.740.13 without 3.650.14 4.170.15 4.59 0.13 3.590.03 ", "8 LPs 16 LPs 32 LPs 48 LPs MA agent 0.34 0.22 0.16 0.15 MA-CR agent 25.3 20.5 14.2 13.7 MA shared state 2.53 1.86 1.53 1.48 MA-CR shared state 5.29 3.41 2.33 1.78 ", "8 LPs 16 LPs 32 LPs 48 LPs layer count 23.6 18.7 16.9 16.0 ", " barrier MA  MA-CR 3 0 8 LPs 16 LPs 32 LPs 48 LPs (a) 4.5e+07 4e+07  barrier MA  MA-CR 3e+07. -  2.5e+07 2e+07 - 1e+07 5e+06 0 8 LPs 16 LPs 32`LPs 48 LPs (b) ", "MA-CR 7 MA 6 barrier dn-paadp 5 4 I 2 0 8 LPs 16 LPs 32 LPs 48 LPs "]}, "pics-000008.png": {"pageNum": 8, "bbox": [[603.1260412862536, 1027.3161612144065, 522.3695394888285, 428.40025520301606], [54.884763225107065, 335.44974936785565, 523.0514096415361, 236.3602497849775], [54.9065037878329, 96.11648591381777, 523.4543780609735, 237.09614577395388], [602.188479518702, 782.745886813729, 523.2919773866579, 188.60594155889225], [602.70452249536, 358.403424659829, 523.3771082314619, 213.06202553274585], [54.916462058497224, 572.919307122854, 522.59216610041, 335.5804561969295], [54.737449497003716, 1408.6233616057305, 523.4684126871489, 140.82323745032477], [603.15156281641, 1456.8845991297635, 522.3283033127889, 92.46998133839907], [602.8484355681865, 572.5727977133197, 522.38649476465, 93.794816200701], [54.48532838558298, 1012.8694267073881, 523.6228194215355, 267.3166934457529], [54.764761817398245, 1357.295368773623, 521.8607741360042, 49.018706113050484], [605.0343073639903, 296.3959150286912, 430.56605517872424, 17.424932645452998], [601.0847324170534, 690.3517503566956, 325.2342694020065, 24.14936555821828], [602.557950929809, 724.7931070297135, 117.34185158710523, 21.26254273525751], [603.6289690321368, 997.6232577440379, 159.52675506385742, 21.875121869969917], [602.67693324864, 752.5105515343053, 347.191824211784, 21.614933492619798], [602.5220317392185, 331.80576427607684, 396.6237788558673, 21.527509707717854], [707.0229499230664, 98.93670706742921, 321.91239412616176, 177.87450348606745]], "text": ["Experiments used a real-world road network.It is the road network of Singapore city consisting of approximately 80,000 links and 40,000 nodes in our representation Agents move on the road network according to their trips derived from the data of the Household Interview and Travel Survey (HITS) in 2008. In every update interval agent states are updated by the Intelligent Driver Model [19] and a rule-based lane-changing model. They form the major computational workload of the simulation. The computation time for models in an agent in one update interval is around 2 s. The data size of migrated agents and shared states are around 200 and 100 bytes, respec tively. The update interval (i.e., 8) is 0.5 seconds; and the front and back sensing ranges of agents are 40 and 20 meters respectively. The road network is initially parti tioned using METIS [20l. An example of the road network in four partitions is shown in Fig. 8. Different intensities of gray represent different partitions. ", "Suppose that the simulation time from the start to the end can be segmented into M (M > 1) periods, and in each period the traffic flow and density of links have no or only marginal changes. Denote the mth (1 < m < M) period as tm. Reevaluation of ki. is only required at the beginning of each period. So, lookahead remains constant during the period. Obviously, the smaller the period is, the more accu- rately kii can be determined, but the more frequent reevalu ation will be required. The size of a period (i.e., t) should be much larger than one update interval (i.e., 8). ", "The heat map in Fig. 7 shows that at a certain time of the day,different roads can have different traffic densities.Traf- fic density on the same link also changes throughout the simulation. Due to computation overhead, it is impractical to recompute the optimum number of extended layers to replicate whenever traffic condition changes. Hence, in this section, we propose a heuristic that periodically adjusts the number of extended layers for computation replication. We denote the obtainable optimum number of extended layers to replicate as ki.j. ", "The proposed heuristics were experimented with SEMSim Traffic simulator [18]. It is implemented using C++. Commu- nication between LPs is realized using OpenMPI 1.8.1 The experiments were run on a cluster composed of three compute nodes. The hardware of each compute node is: Octacore Intel(R) Xeon(R)/2.6 GHz  2 CPUs,192 GB memory Compute nodes are connected via 56 Gbps InfiniBand.Differ ent LPs are mapped to different CPU cores. ", "When computation replication is incorporated to the MA synchronization protocol, the execution of the simulation shown in Algorithm 1 needs to be slightly altered. The first change is that lookahead is determined at the beginning of each evaluation period (by determining kii) and is kept fixed during the period, instead of being determined in syn chronization operations. The second change is that external agents are sent between LPs during synchronization and their states are updated by the corresponding LPs. ", "To determine ki,i, oi,j(, k) needs to be evaluated for each k and agent densities in all link segments needs to be obtained. In cases when there are a large number of avail. able extended layers, the overhead of determining ki.j may become significant. To reduce the overhead of reevaluating kii the following method is proposed to limit the range of k. In consecutive periods tm-1 and tm, the obtainable opti- mum lookahead may not vary much, thus it is very likely that the obtainable optimum lookahead in tm has a similar value to that of m-1. Thus, the lookahead in period tm-l can be utilized to limit the range of k to be evaluated in period tm: An adaptive range in time period tm, denoted as Km, determines the number of extended layers between LP; and LP to be evaluated ", "To determine the obtainable optimum number of extended layers to replicate (i.e., km), the adaptive range is first determined. Then, for each value k in the adaptive range, the overhead is calculated as the larger value between oi,j(tm,k) and oj.i(m,k). km, will be the value that gives the minimum overhead in the range. ", "The traffic of 19 hours from 5 am to the midnight of the same day was simulated. To reduce the influence of work load imbalance of LPs, dynamic load-balancing described in [15] was emploved.Dynamic load-balancing repartitions ", "The effectiveness of the proposed method of dynamically determining the number of extended layers to be replicated has been investigated in experiments and the results will be presented in the next section. ", "where k-i is the obtainable optimum k value between LP and LP, in period tm-1. The adaptive range limits the search range in period m, such that the resultant lookahead is at most twice of that in tm-l. Meanwhile, it ensures that the lookahead is able to grow exponentially if necessary. In the first period (i.e., t), the entire range of [0,K] is searched. In period tm (m > 1), the search range of k is [0, min(K;,j, 2 - km-1 + 1)]. k = 0 here refers to the case where there are no extended layers. When k = 0, oi,j(0) = si,j(0) Based on Equation (6), s;(0) can be derived as follows: ", "whereSiiis the number of shared states LP; sends to LP during synchronization when there are no extended layers ", "ig.8.Singapore city road network partitioned using METis ", "4 EXPERIMENTS AND RESULTS ", "4.1 Set-Up ", "4.1.2 Workload ", "4.1.1 Implementation andHardware ", "3.4 Overall Execution ofthe Simulation ", ""]}, "pics-000011.png": {"pageNum": 11, "bbox": [[54.59693338710319, 550.1140133354585, 522.667349751603, 714.7975113398301], [602.8465450844711, 1144.785852984492, 522.6574247120976, 404.7821713985959], [602.7101939465059, 429.070054950972, 522.8244962104362, 421.891318550512], [55.150690036940816, 1265.3619378964513, 522.964488006494, 284.6792899306329], [602.2420038388912, 95.97809044773962, 523.68744294885, 332.07280656788794], [602.1888339843987, 908.4796687147044, 522.6359795374523, 236.06958254778954], [54.14371207046852, 416.12481016523583, 523.9481303146057, 69.09673926934016], [56.24775398326788, 349.1875976694776, 521.2188699905903, 40.01056421787598], [603.1157617810517, 872.144089192784, 372.9809168915251, 25.344810768303773], [53.47664086059471, 513.896826570597, 203.14033622317493, 25.178080683783264], [78.0048953651187, 98.16331748604927, 476.237136166405, 238.59432723708272]], "text": ["Ihe synchronization issue of parallel discrete-event simula tions has been extensively studied in the literature [3], [6] Nevertheless, improving the performance of synchroniza tion protocols usually involves tuning the protocols for the models used in particular simulations. For parallel agent based traffic simulations, there have been many approaches to conduct synchronization. Employing global barriers is the most frequently used approach due to its simplicity. LPs are blocked from executing agent models at the end of update intervals, then they exchange messages with rele- vant LPs and proceed to the next update interval simulta neously [4], [5]. For parallel simulation using multi threading, all threads access the shared memory directly at barriers instead of communicating with each other by mes sage passing [13]. This simplicity frequently comes at the cost of LPs waiting at global barriers. It does not fully exploit the parallelism of the simulation. The work in [7] used a conservative time window svnchronization from [21]. The synchronization protocol allows LPs to progress asynchronously. LPs analyze their event lists and determine the lower bounds of simulation time for neighboring LPs until which they do not affect the neighboring LPs. LPs col lect the time bounds from all neighboring LPs and take the minimum values as their time windows. They execute local events within the time windows, and then synchronize again. This is inefficient since LPs still need to communicate with all neighbors during synchronization. Communicating to all neighbors is unnecessary. The methods above are con servative approaches, in which no violations of data depen dencies are allowed at any time of the simulation. ", "In this article, we mainly focused on two problems for effec tively applying the concept of computation replication to agent-based traffic simulation: i) how to determine the redun dant computation required to achieve a certain synchroniza tion frequency, and ii) how to manage the trade-off between the overhead caused by redundant computation and the bene- fit of reduced synchronization. The first problem was solved by analyzing the characteristics of agents and road networks to determine extended layers of partitions in a road network Sensing ranges and movement of agents were considered. The second problem was solved by developing an analytical model of the total overhead of redundant computation and synchro nization, and using it to dynamically adjust the number of extended layers to replicate according to traffic conditions. To reduce the overhead of determining the optimum number of extended layers to replicate when traffic condition changes, an adaptive approach was used to limit the search range. ", "Computation replication has also been applied in agent based simulations [10], [11], [12]. However, the simulation space for many of these agent-based applications is a 2D grid. In some cases, agents are not even situated in a spatial environment. For instance, in a social network, agents are represented as vertices of a graph, and interactions of agents are represented as edges.Hence,the definitions of extended layers in those works are not applicable for traffic simula tion either. The indexing of the positions of agents and their interactions are different in a 2D grid or interaction graph from those in a spatial road network. In addition, the dynamics of the workload in the replicated region during simulation run-time is not considered either in these works Our work aims at accurately defining extended layers for agent-based traffic simulation, as well as developing an effective approach to dynamically balance the trade-off between the overhead of redundant computation and the benefit of reducing synchronization operations. ", "Another attempt is to use an optimistic approach [22] [23]. LPs are allowed to progress over the synchronization point and violations of data dependencies are examined. If there is a violation, the simulation is rolled-back to the point before the violation happens. However, the disadvantage of this approach is the overhead of state saving and perform ing roll-back operations. Some optimistic simulation frame works use reverse computation to avoid state saving overhead [24]. Our work aims at improving the efficiency of conservative synchronization methods in agent-based traf fic simulation. In particular, we try to reduce synchroniza tion operations by redundant computation. ", "The idea of reducing communication at the expense of performing some redundant computation has been pre- sented in many previous works. Ghost cell expansion is used in [8] for solving partial differential equation (PDE problems using finite difference method. A similar concept has also been applied in sparse matrix-vector multiplication problems [9]. The computational tasks in those works are organized as regular 2D and 3D grids of cells or meshes They are static and their interactions are predictable. Thus the overhead of computation replication can be analyzed prior to the execution of the program. Dynamic adaptation of redundant computation is not required. Consequently the definition of extended layers based on grids or meshes cannot be used directly in agent-based traffic simulations. ", "Ihe purpose of this work is to reduce the total executior time of parallel agent-based road traffic simulation by reducing synchronization overhead. Making agent-based road traffic simulation fast is crucial for real-time decision support systems and studies that require a lot of simulation runs. Computation replication has been applied mainly in applications such as matrix multiplication and solving par- tial differential equations to reduce inter-process communi cation. However, there is little work done for applying this approach to parallel agent-based road traffic simulation. ", "always outperforms MA and there is no significant drop in performance improvement (that is, the distance between the two lines) when number of LPs increases. ", "of parallel simulation with MA and MA-CR ", "6 CONCLUSION AND FUTURE WORK ", "RELATED WORK 5 ", "MA-CR 4.5 MA 4.0 dn-peedp 3.5 3.0 2.5 2.0 12 LPs 24 LPs 48 LPs 96 LPs "]}, "pics-000005.png": {"pageNum": 5, "bbox": [[602.266048428645, 1239.0182782220218, 523.4722231933874, 310.97283562044436], [54.275218843913365, 593.8778576922506, 524.2790240423974, 431.1367973361631], [603.1777342003435, 951.8229354377531, 523.1384346624067, 288.6976595700892], [54.47462426001536, 356.251280203052, 523.8866120544875, 239.06787529130332], [602.6123614142397, 402.8898477349296, 524.2340881306492, 213.1775388799307], [55.48479611010821, 194.7313193737475, 523.6010862435118, 140.23496482343273], [54.850007125083586, 1084.5927085262792, 523.9156745492592, 167.45214249441324], [602.5830589166527, 614.6300709753474, 523.8740691381187, 165.61446635431582], [54.6522780363385, 1453.0341542236051, 523.1325379778493, 95.94830846635523], [602.0856844666831, 333.0471881480886, 524.8694678918349, 71.70294215765244], [602.942428055406, 858.7399461163624, 524.1451763184145, 95.32825511877809], [602.467148633859, 233.1537512019478, 524.0959646642008, 78.37159416211134], [603.0851595759104, 802.1901128454897, 499.287914877463, 52.53838646792235], [54.07254938952168, 1054.3596400163308, 356.41051327717497, 25.5691596823267], [606.6656766550531, 92.08592473042626, 514.4673766365337, 128.0035762883277], [57.61405308793046, 1282.038744718968, 513.889512626975, 154.34788689318088], [59.81066962516291, 93.39884373697242, 505.1499910287409, 87.1793949888887]], "text": ["The first extended layer is obtained by adding segments from boundary links (lines 12-17). It is assumed that boundary links are long enough to accommodate the segments of the first layer. Subsequently, the algorithm continues to search for segments for the next layer based on the current layer (while loop in lines 18-35). Each iteration of the while loop deter mines one layer of extended layers. In each iteration, seg ments in Sadd are added to the current layer. Segments in Scont are added to a temporary set Stemp-cont. Then, Sadd and Scont are emptied and reused to store new segments for the next layer. After that, the algorithm searches for segments in the next layer connecting to the segments in Stemp_cont. If s < e, the search continues towards the downstream direction of the ", "To explain what happens to the second part of X, during the simulation, an example with two extended layers is depicted in Fig. 5. Supposing a synchronization operation is performed at time 0, LP2 receives complete agents in two layers of extended layers and shared states in the buffer regions from LPi and LP3. As shown in Fig. 5a, states of the agents in X,,, X,., G2, X,.3, and X,3 (i.e., the dark gray and the first part of X? , function as buffer regions. The sec- ond part of X,, (marked with a cross) is dropped since agent states in that region may not be accurate (agents in B2., may updated. As the simulation progresses to time 28 as shown in Fig. 5c, X,,3 and the first part of X, function as buffer regions. Similar to the previous update interval, the region marked with a cross in X,, is dropped. Agents in G2 will be updated. It can be noticed that we have updated agents in G for three update intervals with one synchronization. ", "The algorithm starts with initializing the layer index and a flag that controls the termination of the algorithm. A set Sadd is used to store the segments in the current layer. A set Scont is used to store the segments in Sadd from which the next layer continues. Note that some segments in Sada may not connect to the next layer (a detailed description is provided in the appendix, which can be found on the Computer Society Digital Libraryathttp://doi ieeecomputersociety.org/10.1109/TPDS.2017.2714165). A set Scheck is used to keep track of all the segments that have been added to extended layers. Areas occupied by the seg ments in Scheck will not be searched again. ", "with a wavy pattern, ensures that after agents in X. are updated, the first part of X, contains all the agents required for the next round of state update for X-1. Its size is the maximum distance that agents can travel on link l in one update interval. In contrast, for X-1, the direction of exten- sion is the same as the traffic direction, i.e., Xa is in the downstream direction of X-1. The segment of x, only requires a size of yf, because after an update, Xk. will still contain all the agents needed to update X--1 for the next update interval. ", "The segment sizes for the four basic cases are illustrated in Fig. 6. Link a has the start node of link l as its end node. Link b and link l share the same start node. Link c and link m share the same end node. Link d has the end node of link m as its start node. X, contains an extra segment on link a, and X: contains an extra segment on link c. The extra segments are required so that the buffer regions for the next round of state update will contain all necessary proxy agents, which is for similar reasons explained in Fig.4. ", "Fig.4. Different lengths of link segments in extended layers of G; in neighboring partitions G; and Gg. x, and . are on link l and m, respectively. The solid arrows indicate the traffic directions on links. The empty arrows indicate the directions of extension of extended layers The direction of extension of ; is opposite to the traffic direction of link as the traffic direction of link m, i.e.,extending downstream. ", "When a link is not long enough to cover an extended layer the layer will expand to its connecting links. Link segments on the connecting links may have various sizes depending on how they connect to the link, and how agents sense the connecting links. In our network representation, there are four basic cases of how a link x can connect to another link y: i) they share the same start node; ii) they share the same ", "A real-world road network usually has a large number of links and very complex connectivity. The four cases described above can be arbitrarily combined.Depending on the topology of the road network and sizes of partitions one extended layer can contain many segments. A searching algorithm is designed to determine the segments of extended layers in the next section. ", "Fig. 5.An example of simulation in LP progressing through time using two extended layers in LP and LP: (a) At time o, there are two extended layers for G in G1 and G3.(b) At time , X21 and X3, exclud- and , excluding the crossed region, function as buffer regions. ", "end node iii the start node of link  is the end node of the link y; and iv) the end node of link x is the start node of link y. Sensing ranges of agents can cover connecting links. ", "Extended layers of G; inside G; are calculated by LP,. A search is performed by LP; starting from all the boundary links between G; and G; towards the inner area of Gj. The searching algorithm is shown in Algorithm 2. ", "Fig.6.Four basic cases of extended layer segments on connecting links illustrated by links a,b,c,and d.The kth extended layers of G in Gand tively (marked by a Wavy pattern). ", "3.2.4 Searching Algorithm for Determining Extended Layers ", "3.2.3 Segments on Connecting Links ", "link c LPi link b LPi Bia LPq link a link 1 link m link d iBh x {X.,Xj,G,X-.,X} xa Yh Vas Yb yf ", "LP1 link, LP2 link2 LP3 VrS Yb B X3I XI1 G2 X1.3 X3.3 B2.3 a) time 0 V1S Yb X buffer Inew XL1 G2 X1.3 new buffer btime  new G buffer new ctime 2 ", "LPj linkI LPi link m LPc Yb V-o Yb Yf Bij X {,G,X,-} Big extending upstream extending downstream "]}, "pics-000004.png": {"pageNum": 4, "bbox": [[602.968244973643, 1170.0902294864782, 522.3441951915205, 260.99926818189874], [602.7611188515865, 664.3024031298266, 522.7623465582961, 331.5785053201596], [54.49622082105194, 929.3615167061772, 523.1171519512056, 280.44067606782494], [602.44363574265, 318.1368992833543, 522.8611243324201, 261.56102879553464], [54.52358114200955, 622.3042496662785, 522.9669101887541, 210.68586911416514], [54.95623975588944, 1381.054666189956, 522.5719430939479, 170.43704904521428], [602.5591915597471, 96.14567057081334, 522.8536805527912, 168.37024539598346], [54.89095160539383, 1261.8225917847794, 523.3091209723806, 118.28554498910398], [602.435542109244, 1431.278926079671, 522.9723674835417, 118.16399713399164], [55.04606727117376, 503.66456789467566, 523.0195446523506, 118.66841460630428], [602.8039501232611, 1050.793705311353, 522.3395280598484, 117.43667045259281], [54.523263599823, 834.1042666096146, 523.2832929770907, 94.54242127929842], [54.218061250333896, 381.9214030230932, 523.5013558428282, 69.94521558959218], [56.44633969744645, 292.29584979206123, 521.5122826633159, 40.63165905413109], [54.94622609996002, 473.09868248810494, 261.13077649564735, 24.341949067566134], [603.071158180894, 288.07426733233876, 361.10826561619285, 23.519846916480333], [55.42855052722734, 1232.6207195940108, 209.99884867880178, 23.715799948021413], [54.92628001982331, 353.4944290406865, 368.8075374730357, 23.681400189631347], [602.4812681841075, 605.0521122452935, 297.3669443430009, 22.863249569117556], [627.9467336828375, 1020.3353076627434, 215.49712487011868, 22.912383329097565], [149.88410656355776, 94.75522192180507, 330.7692512546781, 181.4536405916383]], "text": ["The agents in the kth extended layer should allow the agents in the (k - 1)th layer (or local agents if k=1) to advance one update interval. Therefore, the kth extended layer must cover the sensing ranges of the agents in the (k - 1)th layer or those in the local area if k=1). Meanwhile the movement of agents must also be considered. Different sizes of segments depending on the direction of extension of extended layers are illustrated in Fig. 4. The direction of extension is from the (k - 1)th layer to the kth layer (or from the local area to the first laver if k=1).It can be the same as or opposite to the traffic direction of a link. ", "As described before, a road network is represented as a col lection of links and nodes, and agents are situated on links Sensing ranges of agents usually do not cover entire links. thus an extended layer may only cover a portion of links Therefore, we represent an extended layer as a collection of link segments. A link segment is a portion of a link between two points on the link. A link segment can be uniquely iden tified by specifying the link id that the segment is on and displacements of the two points. A displacement of a point on a link is the distance between that point and the start node of the link. Thus, a link segment can be denoted as seg(id,s,e), where id is the id of the link, s is the starting dis- placement of the segment on the link, e is the ending dis. placement. The length of this segment is |e -- s|. ", "Suppose that at simulation time t, complete agents in Xj.2 are replicated to LPi from LP2.Agent-based state variables of agents in B1.2 are send to LP by LP2. The agents in X1.2 are external agents of LPi. States of those agents are updated by LPi together with local agents at time t. At time t + 8, the agents hat fall inside Xi.2 will function as proxy agents. Due to movement of agents, agents currently in X1.2 may be different from those at time t. Then, states of the agents currently in Gi can be updated till time t + 28 using those agents. After that, the next synchronization operation is performed. The same procedure also applies to LP2 Lookahead between the two LPs is 28. ", "Since the computation of external agents is replicated ir LPs, agent models should satisfy the following require ments: i) given the same input values, models of agents always produce the same agent states, including agent based and component-based state variables; and ii) the order of the agents being updated should not affect the result. Otherwise, replicas may generate different states. This requirement is met for deterministic models. For sto chastic models, this can be achieved by manipulating the seeds of the random number generators in the two replicat ing LPs to produce the same random number sequence. ", "When synchronization is conducted, each LP receives complete agents in its extended layer and shared states in buffer regions from neighboring LPs. Agents in the extended layer still exist in the original LPs, but they are replicated in the receiving LP.They are referred to as external agents of the receiving LP.LPs compute the states of external agents,so as to emulate the receive of a synchronization message by pro ducing migrated agent and shard states. This way, the syn chronization operation can be skipped. ", "Supposing that LPi and LPi use k(k > 1) extended layers between them, the lookahead between the two LPs will be (k+ 1).To explain this,we denote the kth extended layer of partition G; in neighbor G; as X,. After a synchronization operation is performed, in the mth (1 < m < k) update inter val, LP, updates the states of local agents and external agents in the extended layers [X!..X? -(m-1)}.After the ", "mth update interval, agents in the extended layer X will function as proxy agents. In the (k+1)th update interval, LP; only updates the states of its local agents. After that, another synchronization is required. A similar proce dure is conducted by LPj. The computation of external agent states is redundant computation, as they are computed by both LPs. ", "More generally, a partition can have multiple layers of extended layers. The first layer is immediately next to the boundary of the partition, and other layers expand towards neighboring partitions. Buffer regions are shifted next to the outermost extended layer ", "In Fig. 4, X, is in the upstream direction of X, i.e., the direction of extension for X-1 is opposite to the traffic part of size Y and the second part of size V8, where V is the speed limit of link l. The second part, which is marked ", "An extended layer of a partition is defined as the space in the road network immediately next to the boundary of the par- tition that is required to calculate the agent states in an LI until the next synchronization. Buffer regions are shifted next to the extended layer. ", "To determine the sizes of extendedlavers, we need to ana lyze the behavior of agents and topology of the road net work, because front and back sensing ranges of agents may be different and road links can have different lengths and connectivity too. ", "The concepts above are illustrated in Fig. 3. The network is the same as that in Fig. 2. Partition Gi has one extended layer in partition G2, which is marked as X12: Bl.2 is the new buffer region of G1 inside G2. ", "We first explain the idea with the simplest case, i.e., one extended layer. Then the generalized multiple layer case is described. ", "Fig. 3. Illustration of extended layers and new buffer regions: The view of the network from IP.. ", "One Extended Layei 3.1.1 ", "3.1.3 Reguirements for Agent Models ", "3.1.2 Multiple Layers ", "3.1 Extended Layers on the Network ", "3.2 Sizes of Extended Lavers ", "2.2 Sizes of Link Segn ", "Logical Process  node link2 G: extended buffer layer Xi,2 region A B,2 boundary cut node, "]}, "pics-000010.png": {"pageNum": 10, "bbox": [[602.8631458945961, 954.733773764345, 522.5191240128008, 379.749194593257], [54.28420971861401, 1102.8933799897286, 524.3904924269305, 260.9563833539862], [54.425327681728575, 769.0950334487299, 524.1909467014901, 260.27684262368996], [602.49987763318, 1335.972787279288, 523.0557259998627, 212.71609813159034], [602.53898701504, 385.7375094349014, 523.333508950778, 309.01728746762706], [602.926890642371, 695.5587648978111, 522.9824697558953, 189.91074308015493], [54.715797550702035, 404.62395701561803, 524.5748478203302, 142.6080120919899], [54.82854348868323, 625.1835982763745, 524.2380795620873, 94.84929285503358], [54.912736476331744, 261.6841388836639, 524.3725919092512, 142.5850687090566], [55.15784581319127, 1030.9981912749477, 523.7802243449394, 70.81939217457193], [646.6024996062454, 113.70303309646167, 433.1076923786991, 62.23024270610921], [55.23731628390256, 720.6022178539686, 523.9175096477093, 47.42853669404883], [143.79700008019324, 113.19742863337636, 342.41943099717133, 43.6675066540884], [109.41233579855457, 1402.3510266752244, 431.59636880355714, 41.01370160679312], [55.310627913135136, 568.7933578293768, 454.5135434857986, 49.57430969067889], [279.3022204298935, 92.12128173943925, 75.17213105769127, 21.226082973526758], [603.8804624438864, 924.1526029798255, 280.4774219082185, 22.97217703201568], [603.642911349537, 355.42467514503545, 293.59064404409355, 23.502938041474806], [827.026307193219, 92.12554724821557, 74.25772771565198, 20.77051591500954], [278.44896242052073, 1379.557005471166, 75.10135607360007, 22.015845369563294], [602.8558202701993, 191.609640853925, 521.9264573680575, 127.2543706866885], [58.11710268139684, 1458.7380813921486, 517.602418951453, 85.75446234343576], [55.89818434408558, 171.89272858067972, 519.1577184270815, 61.05015179601756]], "text": ["In addition to the strong scaling property, it is also interest ing to analyze the weak scaling property on the MA-CR method.So,we conducted another set of experiments using four different problem sizes created using artificial road net works.They are 4816, 9616,19216, and 38416 rectan- gular grid networks. Each road link in the road networks is 200 meters long. Agent populations are 5k, 10k, 20k, and 40k respectively. Simulations with the four different net- works are run with 12, 24, 48, and 96 LPs, respectively.The road networks are partitioned into stripes vertically. Thus an LP has the same workload for all cases in terms of both the size of the network partition and the number of agents. A larger cluster with four compute nodes was used in the experiments, where each compute node has 24 CPU cores Each case was run four times and the average speed-up was taken.The result is shown in Fig.11. ", "Besides computational overheads, extra memory is alsc required for the computation replication method. It consists of mainly two parts: storing segments of extended layers and storing external agents. The memory for storing seg ments depends on the total number of segments in the road network. Storing external agents takes memory propor- tional to redundant computation. In our experiment, storing segments is not significant compared to the memory usage of the whole simulation. Memory for storing agents is increased by 1.5 percent (same percentage as redundant computation shown in Table 5) ", "The computational overhead of the method comes from calculating extended layers (Algorithms 2) and calculating optimum lookahead. Due to dynamic partitioning of the road network, Algorithm 2 was executed 47  2, 40  1 31  1, and 281 times for 8,16, 32, and 48 LPs respectively Optimum lookahead was calculated was executed 114 times for all different numbers of LPs (every 10 minutes in 19 hours simulation time). Both algorithms are executed by every LP, hence, the maximum overhead amongst the LPs is collected. Total overheads of the algorithms throughout the simulation are shown in Table 6. ", "The results in Fig. 11 show that when the problem size is scaled up proportionally with increasing number of LPs, speedup remains increasing for both MA-CR and MA approaches. As expected, the amount of increment becomes less when number of LPs increases. With more LPs, the problem size also becomes larger. As a result, more commu nications are required between different compute nodes. In addition, synchronization overhead also increases with the number of LPs. As shown in the figure above, MA-CR ", "Experiments have also been conducted to analvze the effect of different evaluation periods on the average lookahead the overall simulation execution time, and the overhead of adapting the optimum lookahead. The results of using eval- uation periods of 1, 5, and 10 minutes with 32 LPs are shown in Table 7. There is no significant difference in the average lookahead using different evaluation periods. This is because the traffic condition does not change so often Therefore, frequent reevaluations of the optimum number of extended layers to replicate is not necessary. The over head of executing the algorithm increases when the fre quency of reevaluation increases, which also results in slight increase of the total execution time. ", "The overhead of evaluating the optimal lookahead with out adaptive range for 32 LPs is similar to that shown in Table 7.However,for 8 LPs, the overheads with and with out adaptive range are 18.110.92, and 43.66.6 seconds, respectively, when the evaluation period is 1 minute The benefit of adaptive range is more obvious for more frequent evaluations and fewer LPs (i.e., more available extended layers). ", "When the number of LPs increases from 16 to 32, the speed-up using MA-CR increases further; whereas the speed. up using MA decreases. This is because the absolute number of messages for MA increases drastically as the number of LPs increases, although the percentages of increment on look ahead for MA and MA-CR are similar,as shown in Fig.9 ", "The amount of redundant computation and the overhead of the proposed method are investigated in this section. The amount of redundant computation, calculated as a percentage of the total simulation execution time, is shown in Table 5 ", "adaptive computation replication has improved the overall performance of the simulation. The improvement is the result of increased lookahead and reduced number of synchroniza tion messages, as shown in Fig. 9. This means that the benefit of reduced synchronization messages exceeded redundant computation and the overhead of increased message sizes ", "Table 6 shows that the overheads introduced are at the magnitude of seconds which are insignificant with respect to the overall simulation execution time. ", "Comparison of Average Lookahead,Execution Time and Overhead of Evaluating Optimum Lookahead Usina Different Evaluation Periods with 32 LPs ", "For all cases ii redundant computation is less ", "Redundant Co Las Percentage of the Total Simulation Execution Time ", "Layers nded ", "4.2.3 Redundant Computation and Overhead oi Algorithms ", "TABLE 5 ", "4.2.5 Weak Scaling Property ", "4.2.4 Frequency of Evaluation ", "TABLE 7 ", "TABLE 6 ", "overhead reevaluation lookahead execution time period (update intervals) (second) (second) 1 min 4.500.15 1275.636.8 20.9 1.34 5 min 4.470.14 1261.522.7 2.98 0.29 10 min 4.560.05 1253.836.6 0.83 0.06 ", "8 LPs 16 LPs 32 LPs 48 LPs calc extended layer 6.11.9 1.60.5 0.60.1 0.20.01 calc lookahead 2.60.1 1.20.1 0.8 0.1 1.00.02 ", "8 LPs 16 LPs 32 LPs 48 LPs Percentage 0.77 0.03 1.16  0.04 1.500.03 0.870.03 "]}, "pics-000006.png": {"pageNum": 6, "bbox": [[602.7488307074372, 999.17385059328, 523.2050742133705, 213.11039349222744], [54.85380286191819, 1309.9207444346646, 523.4527275800735, 190.05158910782802], [601.9058522032662, 762.6833840915476, 524.144349231789, 190.91602471046758], [603.0390790353503, 1407.068602801777, 522.8186475264421, 142.55419163295937], [602.4628359678835, 1263.8161236423196, 523.3256516278365, 143.73364692863743], [54.57457620175929, 95.38996332294238, 523.3403287230869, 213.30146071658822], [54.814974098734616, 1499.7865809735908, 522.6761080081901, 47.821361717728905], [751.7689862131075, 113.48094329390896, 215.551299044085, 22.826782149381827], [55.124097724992545, 336.07216138096805, 521.4786933462104, 50.38510862640754], [828.0515992206832, 91.06930925273666, 71.49496299860436, 21.91147441963092], [602.3412542339439, 972.5426787797161, 307.83721116728486, 23.363592982778528], [603.2059142232246, 1235.045305236113, 267.72026056459504, 23.785273369239803], [600.6053766399953, 147.5783789630774, 528.1662942584519, 582.0378008698536], [51.43650246666355, 390.18736170719905, 517.8596872001767, 899.8160757797884]], "text": ["The maximum number of extended layers that a partition can have is decided by the road network. However,to reduce the total execution time of the simulation, it may not be beneficial to replicate all available extended layers due to redundant computation and extra data in messages. This section introdu ces a method to determine the suitable number of extendea layers to replicate using run-time traffic information. We start with analyzing the overhead of computation replication. The notation used in this section is listed in Table 1. ", "The searching terminates if the whole area of G;has been searched (Algorithm 2 line 32) or the extension reaches a third partition. In other words, extended layers of G; inside G; is restricted within G; only. Otherwise, if they were extended to a third partition Gq, LP, would also need to communicate with LPi for synchronization between LP and LP,. This may introduce extra communication which will downgrade the benefit of computation replication. ", "extendedlayers need to be recalculated.The time and space complexity of Algorithm 2 is O(Seg, where[Seg] is the number of segments in extended layers in the calculating LP. This is because the algorithm searches the links within the current partition only once. The time for searching and adding segments in the while loop and for loop, and the memory required to store the segments, are both propor tional to the number of segments in the partition. ", "Considering a pair of neighboring partitions G; and Gi there are Ki.j available extended layers between the two. Let a unit of computation be the wall-clock time required for processing the events from one agent during one update interval. If k(1< k< Kii) layers are replicated, the total units of redundant computation in LP: between two ", "Here, we formulate the total overhead incurred for a pair of LPs when a certain number of extended layers is replicated The MA protocol introduced in Section 2.3 is used for syn chronization between LPs. Therefore, the number of extended layers replicated for G; inside G; and for G; inside Gwill always be equal. ", "link, using function searchDownstream. If e < s, the search continues towards the upstream direction of the link, using function searchUpstream. (For more details of functions searchDownstream and searchUpstream one can refer to Algorithms 3 and 4 in the appendix, available in the online supplemental material). In functions searchDownstream and searchUpstream, when the remaining space on a link is not enough for a layer, the searching will expand to the connect- ing links. ", "Algorithm 2 is executed after partitions are determined If partitions change dynamically during the simulation ", "Notation Used in the Analys ", "Algorithm 2. Searching for Link Segments of Extended Layers of G,Inside G; by LP ", "TABLE 1 ", "3.3 Adaptive Extended Layers ", "3.3.1 Analysis of Overheaa ", "Notation Description A number of agents in extended layer X Ki.j available extended layers between G; and G, K adaptive range of extended layers between LPi and LP in the mth evaluation period |Mi.j] number of migrating agents from LP, to LP; in one synchronization number of shared states that LP sends to LP (i.e., in B in one synchronization Ta computational workload of one agent in one update interval in terms of wall-clock time bw available bandwidth for message-passing kij obtainable optimum number of extended layers to repli- cate between LP; and LP, (k;,; = kj,. since MA protocol is used) ki.. for the mth evaluation period Oi.j(k) total overhead for LPi, relative to LP; in one synchroniza tion cycle, when k layers are replicated, including redun- dant computation and message-passing overhead Oijtk) total overhead for LPi, relative to LP; during time period t when k layers are replicated Sij(k) overhead of sending a synchronization message from LP to LP when k layers are replicated srl send and receive latency of sending a message Ti.j(k) redundant computation between two consecutive synchronization operations in LP; due to external agents from LPi, when k layers are replicated ", "1: Definitions: 2: k index of the extended layer X 3:Iji set of incoming boundary links of G; from G; 4: Oj,i set of outgoing boundary links of G; towards G; 5: Sadd candidate segments to be added to an extended layer 6: Scont segments in Sadd from which the next layer continues 7: Scheck all segments that are already inside extended layers 8:L length of link l 9: Vi speed-limit of the traffic on link l 10 a flag that indicates if the searching should continue 11: initialize k-1,-true; 12: foreach link l e Ij.. do 14: end 15: foreach link l e Oj. do 16: 17: end //searchlayerbylayer 18: while  do 19: foreach seg(id,s,e) E Sadd do 20: put seg(id,s,e) into layer X 21: end 22: Stemp_cont +- Scont; 23: Sadd - O, Scont - &; //search segments forthenext layer 24: foreach seg(id,s.e) E Stemp-cont do 25: ifs< e)then //directionofextensionisdownstream 26: searchDownstream(id,e,Yf); 27: else ifAe< sthen //directionofextensionisupstream 28: searchUpstream(id,e,Y+ Vid8); 29: end 30: end 31: if Sadd = % then 32: -false;//wholeGhas been searched 33: end 34: k-k+1; 35: end "]}, "pics-000012.png": {"pageNum": 12, "bbox": [[54.57348695821239, 95.77007605834825, 522.9889018313485, 163.64631312529406], [55.172869989436414, 260.1269295181153, 522.3445607342701, 210.05160250933676], [55.1932628440449, 524.6642572668485, 522.8900723643105, 94.20730698118086], [609.4604614400284, 1214.1985002754489, 515.4816802274026, 204.62630419414586], [767.6364068116953, 710.1650309646645, 356.5044060709173, 206.34028823773508], [601.2687001135974, 1439.5239630941594, 522.6391106511059, 39.35258842961616], [611.5457831332252, 937.5088375770647, 513.566502068582, 243.2937768658369], [55.37313941567391, 491.2686164904608, 210.01414608902144, 23.514486312991266], [54.83822852537308, 639.4718427122356, 133.111609501573, 24.691613575154065], [55.30311767118807, 672.9018526149933, 522.4370947428422, 876.4092303848578], [603.3778891636998, 90.25219246289576, 522.1345878095879, 603.149159270709]], "text": ["The efficiency of the adaptive computation replicatior method has been investigated in a parallel agent-based traffic simulator using real world data. Experiments have shown that the method is able to reduce synchronization messages significantly by increasing lookahead of LPs. The overall exe cution time of the parallel simulation has been significantly reduced, though there is redundant computation. ", "As of future work, there are two interesting directions First, similar to the extended layers, inner areas of a parti tion can also be divided into layers. This can be used for overlapping communication and computation to further reduce synchronization overhead. Second, partitioning of the road network affects locations and shapes of extended layers, thus the performance may be further improved if the partitioning of the road network considers the optimization of computation replication. ", "This work was financially supported by the Singapore National Research Foundation under its Campus for Research Excellence And Technological Enterprise (CREATE) programme. ", "Wentong Cai is a professor in the School of Com- puter Science and Engineering, NTU, Singapore His expertise is mainly in the areas of modeling and simulation and parallel and distributed computing. He is an associate editor of the ACM Transactions on Modeling and Computer Simulation and an edi- tor of the Future Generation Computer Systems He has chaired a number of international conferen- ces. Most recent ones include SIGSIM PADS 2017,SIMUTools 2016, DS-RT 2015,and Cloud- Com 2014.He is a member of the IEEE ", "Yadong Xu is a currently research associate of TUMCREATE Ltd. He is currently working toward the PhD degree in the School of Computer Science and Engineering, Nanyang Technological Univer sity (NTU), Singapore. His thesis topic is on the load-balancing and synchronization of parallel agent-based road traffic simulation. His research interests are primarily parallel and distributed sys tems, agent-based simulation, ontologies for modelling and simulation, and intelligent transpor- tation system.He is a member of the IEEE ", "", "Vaisagh Viswanathan received the PhD degree in modelling behavior in agent-based simulations of crowd egress from NTU, Singapore, in 2015. He was a post-doctoral research fellow at TUM CREATE Ltd. working on Modelling and Optimi- zation of Architectures and Infrastructure. His research investigates the infrastructure reguire ments and the environmental impact of large scale electro-mobility from a complex systems perspective. His research interests include pri- marily agent based modeling and simulation complex adaptive svstems. He is a member of theIEEE. ", "ACKNOWLEDGMENTS ", "REFERENCES ", "[1] A. Kesting, M. Treiber, and D. Helbing, Agents for traffic simu lation,\" Multi-Agent Syst. Simul. Appl., A. M. Uhrmacher and D. Weyns, Eds. Boca Raton, FL, USA: CRC Press, ch. 11, pp. 325 356.2009. [2] H. Mizuta,Y.Yamagata, and H. Seya,Large-scale traffic simual tion for low-carbon city, in Proc. Winter Simul. Conf., Dec. 0912 2012, pp. 112. [3] R. M. Fujimoto, Parallel and Distribution Simulation Systems New York,NY,USA: Wiley Interscience, 2000. [4] K. Nagel and M. Rickert, \"Parallel implementation of the TRAN SIMS,\" Parallel Comput., vol. 27, no. 12, pp. 16111639, 2001. [5] T. Suzumura and H.Kanezashi,Highly scalable X10-based agent simulation platform and its application to large-scale traffic simu- lation,\" in Proc. IEEE/ACM Int. Symp. Distrib. Simul. Real Time Appl., Oct. 2527, 2012, pp. 243250. [6] D. M. Nicol,Principles of conservative parallel simulation, in Proc. Winter Simul. Conf., Dec. 0811, 1996, pp. 128135. [7] M. Namekawa, A. Satoh, H. Mori, K. Yikai, and T. Nakanishi \"Clock synchronization algorithm for parallel road-traffic simula- tion system in a wide area, Math. Comput. Simul., vol. 48, no. 46 pp. 351359, 1999. [8] C. Ding and Y. He, \"A ghost cell expansion method for reducing communications in solving PDE problems,\" in Proc. ACM/IEEE Conf. Supercomputing, Nov. 1016, 2001, pp. 112. [9] J. Demmel,Avoiding communication in sparse matrix computations,\" in Proc. IEEE Int. Symp. Parallel Distrib. Process., Apr. 1418, 2008, pp. 112. [10] B. G. Aaby, K. S. Perumalla, and S. K. Seal, \"Efficient simulation of agent-based models on multi-GPU and multi-core clusters,\" in Proc. 3rd Int. ICST Conf. Simul. Tools Techn., Mar. 1519, 2010, pp. 110. [11] T. Zou, G. Wang, and M. Salles,Making time-stepped applica tions tick in the cloud, in Proc. 2nd ACM Symp. Cloud Comput. Oct. 2628, 2011, pp. 114. [12] R. Zunino, \"Trading computation time for synchronization time in spatial distributed simulation,\" in Proc. IEEE Workshop Principles Adv. Distrib. Simul., Jun. 1417, 2011, pp. 18. [13] J. Barcelo, J. L. Ferrer, and D. Garcia, Microscopic traffic simula tion for ATT systems analysis. A parallel computing version,\" in Proc. Contribution 25th Aniversary CRT, 1998, pp. 116. [14] Y.Xu,W.Cai,H.Aydt,M.Lees,and D.Zehe,An asynchronous synchronization strategy for parallel large-scale agent-based traf- fic simulations, in Proc. 3rd ACM SIGSIM Conf. Principles Ady Discrete Simul., Jun. 1012, 2015, pp. 259269. [15] Y. Xu,W. Cai, H. Aydt, and M.Lees,Efficient graph-based dynamic load-balancing for parallel large-scale agent-based traffic simulation, in Proc. Winter Simul. Conf, Dec. 7-10, 2014 pp. 34833494. ", "[16] K. Al-Tawil and C. A. Moritz,Performance Modeling and Evalu ation of MPI,\" J. Parallel Distrib. Comput., vol. 61, no. 2, pp. 202- 223, 2001. [17]T. Hoefler, W.Gropp, R. Thakur, and J. L.Traff,Toward perfor mance models of MPI implementations for understanding appli cation scaling issues,\" in Proc. 17th Eur. MPI Users' Group Meeting Conf. Recent Advances Message Passing Interface, Sep. 12-15, 2010, pp. 21-30. [18] Y.Xu, H. Aydt, and M. Lees, \"SEMSim: A distributed architecture for multi-scale traffic simulation,\" in Proc. 26th ACM/IEEE/SCS Workshop Principles Adv. Distrib. Simul., Jul. 15-19, 2012, pp.178 180. [19] M. Treiber, A. Hennecke, and D. Helbing,\"Congested traffic states in empirical observations and microscopic simulations, Phys.Rev. E, vol. 62, no. 2, 2000, Art. no.1805. [20] G. Karypis and V. Kumar, \"A fast and high quality multilevel scheme for partitioning irregular graphs,\" SIAM J. Sci. Comput. vol. 20, no. 1, pp. 359392, 1999. [21] R. Ayani and H. Rajaei,Parallel simulation using conservative time windows, in Proc. 24th Winter Simul. Conf., Dec. 1316,1992 pp. 709717. [22] S. B. Yoginath and K. S. Perumalla, \"Parallel vehicular traffic sim ulation using reverse computation-based optimistic execution,in Proc. 22nd Workshop Principles Adv. Distrib. Simul., Jun. 3-6, 2008, pp. 3342. [23] M. Hanai, T. Suzumura, G. Theodoropoulos, and K. S. Perumalla \"Exact-differential large-scale traffic simulation,\" in Proc. 3rd ACM SIGSIM Conf. Principles Adv. Discrete Simul., 2015, pp. 271 280. [24] C. D.Carothers,K.S.Perumalla, and R. M. Fujimoto,Efficient optimistic parallel simulations using reverse computation,\" ACM Trans. Model. Comput. Simul., vol. 9, no. 3, pp. 224253, 1999. "]}, "pics-000007.png": {"pageNum": 7, "bbox": [[603.1030010159734, 940.4467546092814, 522.7336939144864, 433.97767212921747], [602.8987696971061, 451.6211336049053, 523.2727771614244, 314.8429156513827], [54.19815578605826, 1206.1681324566832, 525.1089722398667, 218.4589892294946], [602.2802861341258, 1454.630572574674, 526.2028496872751, 97.82543864813238], [600.3339149940028, 759.5216695216667, 525.8753233836013, 101.24158277561514], [603.3775346980032, 380.00889285828816, 522.4627048894228, 40.07608610852253], [54.42647231054057, 1111.3056678330765, 524.9230734437461, 99.04937163675982], [54.41068381763709, 936.0955987052228, 524.5732896482056, 97.6309253215286], [55.19814043972439, 840.5355204595569, 524.1289558204433, 99.43221062194004], [55.1587836703469, 212.97575044859158, 523.5864571488243, 75.55095181822574], [55.33287063559784, 453.2360536960164, 523.6788693098131, 100.01124769482084], [54.28900977492236, 284.2517281963436, 525.4246313274059, 76.53030344366124], [81.70452030302663, 1420.1460247535438, 426.8745312589244, 29.491406043219058], [54.8168608900989, 637.3757548519444, 524.6103719293629, 98.79867918559034], [54.257251863916096, 731.6193914087714, 523.9790943701455, 51.98517218784889], [53.17931060345131, 91.82386014185496, 365.31148661551606, 30.205767722179075], [158.06489422279762, 1571.6615525552131, 861.4585584946285, 25.790077810116827], [603.0438643222545, 1396.494306991232, 514.9936400407774, 53.93722829039348], [612.1735418819336, 92.93617004982968, 508.67440283434087, 275.00631067473245]], "text": ["Equation (7) shows that as the number of replicated extended layers (i.e., k) increases, the number of synchroni zation operations during period  (i.e., the first term of the right-hand side of Equation (7)) decreases; however the total overhead per synchronization cycle (i.e., the second term of the right-hand side of Equation (7)) increases. The optimum k should give the best trade-off between the benefit of reduc ing the synchronization frequency and the total overhead caused by redundant computation. It can be noticed from Equations (2) and (6) that the total overhead is influenced by many factors, including the numbers of agents in the extended layers,time to compute agent states for one update interval, data sizes of complete agents and shared states message-passing bandwidth, and send and receive latency Obviously, oii(, k) is not guaranteed to be a simple convex or concave function, thus the optimum k cannot always be determined mathematically using Equation (7). A naive way is to traverse all possible k values and pick the optimum ", "where Da and D, are the data sizes of a complete agent and the shared state of an agent respectively, Mii is the set of migrating agents from LP; to LP; at the time of synchroniza. tion, S;is the set of shared states that LP sends to LP dur ing the synchronization, bw is the available bandwidth for message-passing, and srl is a send and receive latency for the message. Values of bw and srl should be calibrated according to the actual simulation environment. They are not necessar- ily constants and can be different for different LP pairs. In general, message-passing time increases as the message size increases. So, this equation shows that as the number of repli cated extended layers increases, the overhead of passing one synchronization message increases as well. ", "We conducted an experiment to profile message-passing overhead for MPI in the cluster used for our experimenta- tion to validate this simple model. Results show that a linear regression fits quite well to the MPI message passing over- head. However, as indicated in the existing literature (e.g. [16] and [17]), it is not straightforward (may be even impos sible) to define an accurate cost model for message-passing that can be universally applied. Hence, the model should be adapted according to the specific experimentation set-up. ", "Iraffic density and flow on the roads often change through out the simulation. To give an example, the traffic densities on main roads in our simulation of Singapore city traffic are shown in Fig. 7. ", "In order to compare the overhead of synchronization asing different numbers of extended lavers, we define the total overhead for LPi, relative to LPi, during a simulation period , t > 8,with k extended layers, as follows: ", "cities on main roads in a simu- ", "where the first item is transmission time and the second item is latency. Note that bandwidth and latency may not be constants, i.e., they may vary with different message sizes. ", "Based on the fact that the time for message-passing gen erally involves the actual message transmission time and certain latencies on the sending and receiving ends, we use the following model to express the message-passing time ", "where sii(k) is the overhead for sending one messages from LP, to LP during synchronization when k extended layers are replicated. It is the time that LP needs to wait for the message from L Pj to arrive before progressing. ", "where |A| is the number of agents in layer X.. It can be estimated using the sizes of the segments in the extended layer and agent densities on the segments. ", "where Ta is a unit of computation, i.e., the wall-clock time for computing the events of an agent in one update interval From Equation (2), we can derive the difference quotient of Ti,j between k + 1 and k as ", "Therefore, the redundant computation in terms of wall clock time in LPi, relative to LP; between two consecutive synchronization operations is ", "Based on Equation (5), sii(k) can be expressed as ", "It is known that |A,|  0; therefore, T;,j(k + 1, k)  0. This equation shows that if extended layers are not empty (i.e. A;| > 0), the redundant computation increases with an increasing k and the increase becomes faster as k increases. ", "The total overhead for LPi, relative to LPi, in one syn chronization cycle using k extended layers is ", "consecutive synchronization operations is ", "zed licensed use limited to: Southeast University. Downloaded on December 21,2022 at 05:11:40 UTC from IEEE Xplore. Restrictions ", "3.3.2 Dynamic Determination of the Optimum Number of Extended Lavers to Replicate ", "1200 1000 800 600 400 200 05:00am 08:00am 12:00pm 04:00pm 08:00pm 12:00am simulation time "]}, "pics-000003.png": {"pageNum": 3, "bbox": [[54.170592385795295, 379.5088557648265, 524.8565077398023, 478.6049105999712], [54.64876291818039, 857.840099898675, 522.8722715401084, 453.78329473220185], [602.9206284150641, 92.42512840320545, 523.103578868906, 431.45182468720634], [602.5874306602443, 1312.8311539129772, 522.9923947954005, 236.14211917100192], [54.20917006911043, 1359.2200398503435, 521.7863621861718, 143.3174190417251], [602.4091934924621, 1109.025542797, 523.512691360418, 143.36165167851505], [54.454977260310166, 308.3855633204535, 525.7556247486749, 39.435815627786496], [54.46617985326366, 1500.5784799530181, 524.1448366221219, 49.298315191040956], [604.8570745156818, 546.8164151251342, 520.8160935734055, 48.82204854505085], [53.77069600239541, 1331.328115360187, 513.1732593016957, 25.521986371622916], [604.9716850909213, 1276.085105323893, 426.4733942455864, 26.11440963721634], [607.3405202637954, 606.9705343899466, 518.8805336370293, 477.4168170746709], [606.6435816266306, 593.3631784932588, 513.6614397976592, 492.95582814862473], [119.3039964507276, 94.27952196818386, 397.0572904028297, 200.26919036220926]], "text": ["sensing range of another agent B in LPi, agent B should be aware of the agent-based state variables of agent A.To achieve this, a proxy agent is created in LP, that mirrors agent A. It pos. sesses exactly the same agent-based state variables as agent A Hence, the agent-based state variables of agent A should be sent by LP to LP; to keep the state of the proxy agent updated. In this case, there is a data read dependency between LP and LP,. The agent-based state variables of agent A are shared states. Second, during the simulation, when an agent on a boundary link moves beyond the boundary of partition i and enters the area of partition j (i  j), the agent migrates from LPi to LP;.Migrated agents are destroyed in the original LP and recreated with all their state variables in the new LP The migration of agents incurs a data write dependency between the two LPs. To identify those agents that need to share their states, buffer regions of partitions are defined. They are the regions at the boundary of partitions with sizes equal to the sensing ranges of agents. If an agent falls inside a buffer region, it is possible that the agent is in the sensing range of some agents in the neighboring LP ", "To illustrate the concepts above, an example is shown in Fig. 2. link2 is a boundary link. The left half is part of Gi and the right half is part of G2: The direction of traffic on link2 is from Gi to G2, thus link2 is an outgoing boundary link of Gi, and an incoming boundary link of G2. LP and LP2 are neighboring LPs. B1,2 is the buffer region for G1 in G2, and B2.1 is the buffer region for G2 in G1. Given the traf fic direction of the link, the lengths of Bi.2 and B2.1 are equal to the front and back sensing ranges of agents, respectively Agent C in LP2 is in buffer region B1.2. Therefore, there is a data read dependency between LPi and LP2. LP2 should send the agent-based state variables of agent C to LPi There is a proxy agent in LP mirroring agent C. If agent B continues moves into G2, LP2 will be responsible for execut ing events of agent B. Thus agent B is removed from LP and created anew in LP2. To do so, the complete informa tion about agent B, including all state variables and all model parameters, is sent from LPi to LP2. There is a data write dependency between LPi and LP2. ", "there is a synchronization event. Associated with the syn chronization event, there is a set of LPs that currently have appointments with LPi, denoted as Ct. Ct may include all, none, or only a subset of the neighboring LPs of LP. When Ct is empty, no message-passing occurs for LPi at time t. For each LP, in the set C,, LP, sends and receives migrating agents, shared states and a lookahead. Lookahead is a pre- dicted time period from the current time to the time when the next data dependency may happen. After messages are received, the next appointment is made according to the lookahead. An appointment is made by adding the LP to the future C,+t set, where t is the minimum of the two lookahead values of LP and LP,. According to the defini tions of data read and write dependencies, the minimum lookahead value between any two LPs is an update interval (i.e., ). Lookahead decides the frequency of synchroniza tion. In this work, the lookahead is determined by the num- ber of replicated extended layers ", "The aim of this work is to reduce synchronization so as to reduce simulation execution time. This is achieved by increasing lookahead via copying more information from neighboring LPs at each synchronization operation. Interac tions of agents are bounded by their locations on the road network; thus,we determine the extra information based on agent locations on the road network. Extended layers of par titions are defined in this section. Then an adaptive method that dynamically adjusts the number of extended layers to replicate is proposed. ", "Data dependencies necessitate svnchronization of LPs. The synchronization protocol used in this work is the mutual appointment (MA) protocol introduced in [14]. The idea of the protocol is that an LP communicates with other LPs by making appointments individually with them at certain mutually agreed simulation times ", "Another consideration for efficient parallel simulation is workload balance of LPs. Agents should be distributed as evenly as possible among LPs. In this work, we focus on synchronization, thus load-balancing will not be discussed More detail regarding load-balancing in traffic simulation, one can refer to [15] ", "Fig. 2. Illustration of boundar and back sensing ranges, respectively ", "The progression of the simulation in LP; using the MA protocol is shown in Algorithm 1.For each update interval ", "Algorithm 1. Simulation Progression in LPi Using MA Protocol ", "2.3 Mutual Appointment Synchronization Protocol ", "3 ADAPTIVE COMPUTATION REPLICATION ", "1: Definitions: 2: Tend simulation ending time 3: C} LPs having appointments with LP; at simulation time t 4: lt., lookahead from LP, to LP; at simulation time t 5: initialize t  0, C? as all neighboring LPs of LPi; 6: while t < Tend do //synchronizationevent 7: foreach LP; E C do 8: send migrating agents, shared states, and current look- ahead (i.e., lt.) to LPj; 9: prepare to receive a message from LPj: 10: end 11: wait for all message sending and receiving to finish 12: update the local agent set and proxy agent set; 13: foreach LP; E C, do 14: 15: end //eventforupdatingagent-basedstates 16: update the states of local agents for this update interval; 17: tt+8; 18: end ", "1: Definitions: 2: Tend simulation ending time 3: C, LPs having appointments with LP; at simulation time t 4: lt., lookahead from LP; to LP; at simulation time t 5: initialize t - 0, C as all neighboring LPs of LP; 6: while t < Tend do //synchronizationevent 7: foreach LP; E C, do 8: send migrating agents, shared states, and current look ahead (i.e., li,j) to LPj; 9: prepare to receive a message from LPj; 10: end 11: wait for all message sending and receiving to finish; 12: update the local agent set and proxy agent set; 13: foreach LP; E C, do 14: 15: end //event forupdatingagent-basedstates 16: update the states of local agents for this update interval; 17: tt+8; 18: end ", "Logical Process 1 Logical Process 2 node? link2 B OCD inodes buffer buffer link region region B2.1 B.2 size=Yb size=f inode boundary cut node4 "]}, "pics-000002.png": {"pageNum": 2, "bbox": [[602.4104341224003, 690.1749423376156, 522.291497957957, 426.8799880535122], [55.24015939417751, 573.0561709879353, 522.8850618439947, 284.9971277695056], [54.171057622022104, 95.67792728437092, 522.1902832321687, 475.77974237513985], [54.451975378941945, 860.535350068946, 523.1717359761336, 259.4589064273157], [602.3265439075343, 397.88521894954187, 522.8144530156989, 236.69297478554], [602.4920203102382, 1170.5973732085654, 523.3912277817107, 188.52072327942574], [602.762595791989, 1361.7095653747133, 523.1493640213857, 140.58822859336328], [55.0964309389014, 1261.4947066433672, 523.0204603554002, 141.17648590424528], [55.27453887439833, 1456.8363230663417, 521.9331479080812, 92.42047999417991], [603.1419922426013, 315.00707264622844, 522.3671763841845, 57.395981557609446], [601.2860098551156, 1503.6969421107472, 524.0957874313525, 45.70150340996611], [53.69239231460215, 1141.755243459944, 523.7337044146095, 51.95006789300055], [53.96818878067608, 1204.3346222712973, 340.6003093497828, 23.21147437176819], [604.0448754495004, 659.1044556666126, 269.1454489754592, 23.13685477120032], [54.947259958241816, 1232.0654223365818, 231.81572491523457, 22.153321875043275], [54.78964457083054, 1427.2060927087655, 136.3144212268644, 21.95825717208072], [609.0294311529424, 95.40947591964265, 509.3774264659644, 204.96281224917038]], "text": ["An agent has a state at a certain virtual simulation time. The state contains multiple state variables. Among them, there are agent-based and component-based state variables. Agent-based state variables belong to the entire agent and are visible to other agents, such as velocity and position. Component-based state variables belong to the models in an agent, such as a state-of-charge variable for a battery model in an electric vehi- cle. An agent subscribes to agent-based state variables of the agents in its sensing range. States of agents change as the sim- ulation progresses by executing timestamped events which contain certain update functions. Agent-based state variables are updated periodically.The period is referred to as an update interval, denoted as 3. The events that change agent-based state variables may have an effect on other LPs, thus they affect synchronisation between LPs. Other events that change component-based state variables are internal to an LP. An illustration of sensing ranges and state subscription is shown in Fig.1. ", "We solve two challenges in this paper. The first challenge is to limit the amount of redundant computation. We pro pose a way to define extended layers of partitions for agent- based road traffic simulation. The sizes of extended layers are determined by the behavior of agents and topology of road networks in our representation. The second challenge is to deal with the dynamic nature of road traffic. A method is proposed to adjust the amount of redundant computation according to traffic conditions on the road network dynami cally during the simulation. Efficiency of the proposed methods is investigated in a parallel agent-based road traffic simulator using real-world network and trip data. ", "12.However,there is a major difference between the simu lation spaces in those simulations and those in agent-based road traffic simulation. The spaces in the existing works are either n-dimensional grids where computational tasks are distributed uniformly, or graphs where vertices represent computational tasks and edges represent the dependencies of the tasks. The simulation space in agent-based road traffic simulation is a spatial network composed of links and nodes Agents are situated in the spatial network. The distribution of agents in the spatial network may not be uniform and it dynamically changes since agents move along the links. The interaction of agents depends on the positions of agents and is dynamic. The interaction of agents affects how computa tion is replicated. Thus, the existing solutions cannot be directly applied to agent-based road traffic simulation. It is non-trivial to determine how computation can be replicated in agent-based road traffic simulation. In addition, the trade- off between the redundant computation and the benefit of reduced synchronization operations should be carefully studied in order to gain overall performance improvement. ", "next section presents some background information about parallel agent-based traffic simulation used in this work agent models, partitioning of the simulation, and the synchro- nization protocol. Section 3 introduces our proposed adaptive computation replication method. Extended layers of parti tions on the road network are defined. A heuristic that adjusts the number of extended layers to replicate is developed. Sub sequently, Section 4 presents experiments and results. Sec tion 5 describes related works. Finally, Section 6 provides a summary of this work and recommendations for future work ", "movement of DVUs on roads, such as what acceleration a DVU should have and which lane to take. The models require agents to have sensing ranges, which are the areas in the road network within which other agents may affect the agent's behavior. An agent needs to examine the traffic condition within its sensing range to make acceleration and lane-changing decisions. This is challenging in parallel traf fic simulation when the sensing range is reaching into other partitions as it then potentially requires synchronization between the responsible LPs ", "We denote the entire road network as G, and agent popula tion at simulation time t as At. In parallel simulation, the road network is partitioned into I disjoint spatial subre- gions, G = {Go,G1..Gi-1}. The subset of A that resides in partition G; 0 < i < I at simulation time t are denoted as A,. By definition, At = U-A. The LP that is responsible for executing the events from agents in partition i is LP, Agents in partition i are local to LP,. ", "During partitioning, the network is cut on links. The links that are cut and therefore evenly divided between two partitions are named boundary links. A boundary link can be incoming to or outgoing from a partition, depending on the traffic flow on the boundary link. The two partitions that share boundary links are neighboring partitions. ", "The simulation space of an agent-based traffic simulation is a road network. It is a spatial network that consists of links and nodes. Links represent real-world roads and can have one or more lanes. Links have speed limits. Nodes contain the connectivity information of links. The traffic flow on a link is unidirectional from the start node to the end node ", "Agents are situated on roads (i.e.,links) of the network. An agent in the simulation represents a DVU. The behavior of DVUs is often characterized by acceleration models and lane-changing models[1],[4],[13].The models describe the ", "Fig.1.Agent B with front sensing range y and back sensing range , in a road network.Agent C is in the sensing range of agent B;thus, agent B subscribes to agent-based state variables of agent C ", "", "PARALLEL AGENT-BASED SIMULATION OF ROAD TRAFFIC ", "2.1 Simulation Space and Agents ", "2.1.3 AgentState Variables ", "2.1.1 Simulation Space ", "2.1.2 Agents ", "(node2! link2 inodes sensing range of agent B link back front A sensing sensing rangeb rangef inode node4 "]}, "pics-000001.png": {"pageNum": 1, "bbox": [[602.4012770919044, 784.8417296178608, 527.399762189518, 456.2478857923426], [602.8512122161433, 1238.0678279073975, 526.7886633285507, 264.3086290878789], [54.18285468348763, 785.8353098165572, 527.7838294641533, 240.27058029011403], [104.95319425862496, 372.8002902383889, 965.9767642658885, 254.90346558229317], [54.668926847026476, 1024.6846256456058, 526.869917204798, 192.15962345589492], [81.96271902420393, 301.68621803201717, 1021.3247587712086, 29.636785609842832], [55.10891108530311, 1369.490466023107, 525.6926443175583, 58.24911394489209], [54.845336301060456, 1426.0948855535087, 303.73101038300643, 20.897899169920038], [55.108988624674254, 1444.7790699065772, 523.5440911133766, 56.72461957663677], [56.22803682889357, 1250.9862084116485, 518.1497139870295, 113.17183558071838], [102.31915228236332, 651.8403784586063, 855.8754136154289, 23.362000117741786], [58.042188571827474, 1434.176960221929, 523.5310386525688, 19.62618023019013], [136.48615985687525, 93.20123657635486, 912.8838952918486, 184.41786287097648], [55.448341528621775, 751.3916863740639, 185.31062306692445, 25.678332201384478], [55.16304464340832, 1247.9676066389159, 520.6277836720777, 116.23319965328392]], "text": ["typically achieved by message-passing. For agent-based traf- fic simulation, global barriers are commonly used [4], [5]. Agent models are updated with fixed intervals and global barriers are deployed at the end of update intervals. The limi- tation of this synchronization method is that all LPs have to wait at global barriers despite some LPs having no depen dencies with other LPs. Another approach for synchroniza tion is to allow LPs to exchange messages and progress asynchronously [6], [7]. LPs do not need to synchronize at the same time. The frequencies of synchronization can be differ ent for different LP pairs and is determined by a measure termed lookahead.Lookahead of LP towards LP;i j at simulation time t is a time interval in the simulated future within which LP will not have data dependencies with LPi The larger lookahead values are, the less frequent synchroni zation is performed. However, due to the frequent interaction of agents, agent-based simulations generally have small look ahead. High synchronization overhead is still an issue for the performance of parallel agent-based traffic simulations. ", "Computation replication is an effective approach reported in the literature to reduce inter-process communication in parallel applications [8], [9], [10], [11], [12]. The concept is to let LPs conduct some redundant computation to generate data locally instead of receiving them from synchronization There is a trade-off between the benefit of reduced synchro nization and the overhead of redundant computation: to fur- ther reduce synchronization operations, more redundant computation is usually required. This method has been used for solving partial differential equations and matrix multipli cation [8], [9], as well as agent-based simulations [10], [11] ", "GENT-BASED road traffic simulation considers the scale agent-based simulation of road traffic e.g, the whole city) is a useful tool to evaluate the impact of individual behaviors on road traffic as a whole [2]. It is useful in solv- ing the severe problems that modern large cities face, such as congestion and high emissions. However, such traffic simulation usually involves thousands or millions of agents which is computationally intensive. Parallel computing techniques can be used to speed-up the simulation. ", "Abstract-Road traffic simulation is a useful tool for studying road traffic and evaluating solutions to traffic problems.Large-scale agent-based road traffic simulation is computationally intensive,which triggers the need for conducting parallel simulation.This paper deals with the synchronization problem in parallel agent-based road traffic simulation to reduce the overall simulation execution time We aim to reduce synchronization operations by introducing some redundant computation to the simulation. There is a trade-off between the benefit of reduced synchronization operations and the overhead of redundant computation.The challenge is to minimize the total overhead of redundant computation and synchronization.First,to determine the amount of redundant computation,we proposed a way to define extended layers of partitions in the road network.The sizes of extended layers are determined by the behavior of agents and the topology of road networks.Second,due to the dynamic nature of road traffic,a heuristic was proposed to adjust the amount of redundant computation according to traffic conditions during simulation run-time to minimize the overall simulatior execution time.The efficiency of the proposed method was investigated in a parallel agent-based road traffic simulator using real-worlc network and trip data. Results have shown that the method can reduce synchronization overhead and improve the overall performance of the parallel simulation significantly ", "Io parallelize an agent-based traffic simulation,a common way is to decompose the road network into multiple spatial subregions (i.e., partitions). Each subregion is executed by a Logical Process (LP) which is assigned to a physical proc essing unit. To maintain the correctness of the simulation synchronization of LPs is required for simulation time advancement due to data dependencies between LPs [3] In a distributed memory environment, synchronization is ", "", "Manuscript received 25 Sept.2016; revised 16 Apr.2017;accepted 26 Ma 2017. Date of publication 9 June 2017; date of current version 11 Oct.2017. (Corresponding author: Yadong Xu.) ", "Recommended for acceptance bu C.Carothers ", "For information on obtaining reprints of this article, please send e-mail to reprints@ieee.org, and reference the Digital Object Identifier below. Digital Object Identifier no.10.1109/TPDS.2017.2714165 ", "Y.Xu is with AIDA,TUMCREATE Ltd.,Singapore 138602 E-mail: xuya0006@e.ntu.edu.sg. V. Viswanathan is with RP5, TUMCREATE Ltd., Singapore 138602 E-mail: vaisagh.viswanathan@tum-create.edu.sg. W.Cai is with the School of Computer Engineering,Nanyang Technologi cal University, Singapore 639798. E-mail: aswtcai@ntu.edu.sg. ", "Index Terms--Agent-based traffic simulation,parallel simulation,conservative synchronization,computation replicatic ", "", "Reducing Synchronization Overhead with Computation Replication in Parallel Agent-Based Road Traffic Simulation ", "INTRODUCTION ", "Y.Xu is with AIDA,TUMCREATE Ltd.,Singapore 138602 E-mail: xuya0006@e.ntu.edu.sg. V. Viswanathan is with RP5, TUMCREATE Ltd., Singapore 138602 E-mail: vaisagh.viswanathan@tum-create.edu.sg W. Cai is with the School of Computer Engineering, Nanyang Technologi cal University, Singapore 639798. E-mail: aswtcai@ntu.edu.sg. "]}}